{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Single server template",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SiteType": {
      "Description": "Website type",
      "Type": "String",
      "AllowedValues": [
        "joinup",
        "subsite"
      ]
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "env": {
      "Description": "The stack environment",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9\\-]+"
    },
    "HostedZone": {
      "Type":"String",
      "Description":"The DNS name of an existing Amazon Route 53 hosted zone",
      "Default":"joinup.fpfis.tech.ec.europa.eu"
    },
    "ApplicationName": {
      "Type": "String",
      "Description": "The CodeDeploy application name"
    },
    "GithubSSHKeys": {
      "Type": "String",
      "Description": "Comma separated list of Github user names for SSH public keys"
    },
    "AdditionalPhingProperties": {
      "Type": "String",
      "Description": "Additional phing properties to inject in the environment."
    }
  },
  "Mappings": {
    "Ami2SiteType": {
      "eu-west-1": {
        "joinup": "ami-5e1dc627",
        "subsite": "ami-d71285a4"
      }
    }
  },
  "Conditions": {
    "Is-EC2-VPC": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "eu-central-1"
          ]
        },
        {
          "Fn::Equals": [
            {
              "Ref": "AWS::Region"
            },
            "cn-north-1"
          ]
        }
      ]
    },
    "Is-EC2-Classic": {
      "Fn::Not": [
        {
          "Condition": "Is-EC2-VPC"
        }
      ]
    }
  },
  "Resources": {
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "cloudformation:*",
                "codedeploy:*",
                "ec2:*",
                "elasticloadbalancing:*",
                "cloudwatch:*",
                "autoscaling:*",
                "route53:*",
                "rds:*",
                "iam:AddRoleToInstanceProfile",
                "iam:CreateInstanceProfile",
                "iam:CreateRole",
                "iam:DeleteInstanceProfile",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:GetRole",
                "iam:PassRole",
                "iam:PutRolePolicy",
                "iam:RemoveRoleFromInstanceProfile"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "DNS": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join":[
            "",
            [
              {
                "Ref": "HostedZone"
              },
              "."
            ]
          ]
        },
        "Comment":"Zone apex alias targeted to Server.",
        "RecordSets": [
          {
            "Name": {
              "Fn::Join":[
                "",
                [
                  { "Ref": "env" },
                  ".",
                  { "Ref": "ApplicationName" },
                  ".",
                  { "Ref": "HostedZone" },
                  "."
                ]
              ]
            },
            "Type": "A",
            "TTL" : "300",
            "ResourceRecords": [
              { "Ref": "WebServerIP" }
            ]
          },
          {
            "Name": {
              "Fn::Join":[
                "",
                [
                  "*.",
                  { "Ref": "env" },
                  ".",
                  { "Ref": "ApplicationName" },
                  ".",
                  { "Ref": "HostedZone" },
                  "."
                ]
              ]
            },
            "Type": "A",
            "TTL" : "300",
            "ResourceRecords": [
              { "Ref": "WebServerIP" }
            ]
          }
        ]
      }
    },
    "WebServerIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "WebServerIPAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "WebServerIP", "AllocationId" ]},
        "InstanceId" : { "Ref" : "WebServer" }
      }
    },
    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "WebServerSecurityGroup"
          }
        ],
        "DisableApiTermination":"false",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "# Setup application dependencies.\n",
                "mkdir -p /usr/local/etc/subsite \n",
                "echo 'aws.region=",
                {
                  "Ref": "AWS::Region"
                },
                "' >> /usr/local/etc/subsite/subsite.tmp.ini",
                "\n",
                "echo 'cf.stackName=",
                {
                  "Ref": "AWS::StackName"
                },
                "' >> /usr/local/etc/subsite/subsite.tmp.ini",
                "\n",
                "echo 'deploy.applicationName=",
                {
                  "Ref": "ApplicationName"
                },
                "' >> /usr/local/etc/subsite/subsite.tmp.ini",
                "echo '",
                {
                  "Ref": "AdditionalPhingProperties"
                },
                "' >> /usr/local/etc/subsite/subsite.tmp.ini",
                "\n",
                "echo 'deploy.groupName=",
                {
                  "Ref": "env"
                },
                "' >> /usr/local/etc/subsite/subsite.tmp.ini",
                "\n",
                 "echo '",
                {
                  "Ref": "GithubSSHKeys"
                },
                "' > /etc/github.keys",
                "\n",
                "mv /usr/local/etc/subsite/subsite.tmp.ini /usr/local/etc/subsite/subsite.ini",
                "\n"
              ]
            ]
          }
        },
        "ImageId": {
          "Fn::FindInMap": [
            "Ami2SiteType",
            { "Ref": "AWS::Region" },
            { "Ref": "SiteType" }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "Tags": [
          {
            "Key": "stack",
            "Value": {"Ref": "AWS::StackName"}
          },
          {
            "Key":"Name",
            "Value": { "Ref": "AWS::StackName" }
          },
          {
            "Key":"env",
            "Value": { "Ref": "env" }
          }
        ]
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "WebServer",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1080",
            "ToPort": "1080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "WebServerIP": {
      "Value": { "Ref": "WebServerIP" }
    },
    "WebServerURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            { "Ref": "env" },
            ".",
            { "Ref": "ApplicationName" },
            ".",
            { "Ref": "HostedZone" },
            "/"
          ]
        ]
      },
      "Description" : "Endpoint URL"
    }
  }
}
